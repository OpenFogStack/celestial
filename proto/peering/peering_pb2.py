# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: peering.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rpeering.proto\x12\x1eopenfogstack.celestial.peering\"\x07\n\x05\x45mpty\"2\n\x07Machine\x12\r\n\x05shell\x18\x01 \x01(\x03\x12\n\n\x02id\x18\x02 \x01(\x04\x12\x0c\n\x04name\x18\x03 \x01(\t\"4\n\x10StartPeerRequest\x12\x11\n\tpublickey\x18\x01 \x01(\t\x12\r\n\x05index\x18\x02 \x01(\x04\"j\n\x0cRouteRequest\x12\x38\n\x07machine\x18\x01 \x01(\x0b\x32\'.openfogstack.celestial.peering.Machine\x12\r\n\x05index\x18\x02 \x01(\x04\x12\x11\n\tbandwidth\x18\x03 \x01(\x04\x32\xcd\x01\n\x07Peering\x12\x64\n\tStartPeer\x12\x30.openfogstack.celestial.peering.StartPeerRequest\x1a%.openfogstack.celestial.peering.Empty\x12\\\n\x05Route\x12,.openfogstack.celestial.peering.RouteRequest\x1a%.openfogstack.celestial.peering.EmptyB\x0cZ\n./;peeringb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'peering_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\n./;peering'
  _globals['_EMPTY']._serialized_start=49
  _globals['_EMPTY']._serialized_end=56
  _globals['_MACHINE']._serialized_start=58
  _globals['_MACHINE']._serialized_end=108
  _globals['_STARTPEERREQUEST']._serialized_start=110
  _globals['_STARTPEERREQUEST']._serialized_end=162
  _globals['_ROUTEREQUEST']._serialized_start=164
  _globals['_ROUTEREQUEST']._serialized_end=270
  _globals['_PEERING']._serialized_start=273
  _globals['_PEERING']._serialized_end=478
# @@protoc_insertion_point(module_scope)
