"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

This file is part of Celestial (https://github.com/OpenFogStack/celestial).
Copyright (c) 2024 Tobias Pfandzelter, The OpenFogStack Team.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _VMState:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _VMStateEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_VMState.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    VM_STATE_STOPPED: _VMState.ValueType  # 0
    VM_STATE_ACTIVE: _VMState.ValueType  # 1

class VMState(_VMState, metaclass=_VMStateEnumTypeWrapper): ...

VM_STATE_STOPPED: VMState.ValueType  # 0
VM_STATE_ACTIVE: VMState.ValueType  # 1
global___VMState = VMState

@typing_extensions.final
class MachineID(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    GROUP_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    group: builtins.int
    id: builtins.int
    def __init__(
        self,
        *,
        group: builtins.int = ...,
        id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["group", b"group", "id", b"id"]) -> None: ...

global___MachineID = MachineID

@typing_extensions.final
class Empty(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___Empty = Empty

@typing_extensions.final
class RegisterRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HOST_FIELD_NUMBER: builtins.int
    host: builtins.int
    def __init__(
        self,
        *,
        host: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host", b"host"]) -> None: ...

global___RegisterRequest = RegisterRequest

@typing_extensions.final
class RegisterResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AVAILABLE_CPUS_FIELD_NUMBER: builtins.int
    AVAILABLE_RAM_FIELD_NUMBER: builtins.int
    PEER_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    PEER_LISTEN_ADDR_FIELD_NUMBER: builtins.int
    available_cpus: builtins.int
    available_ram: builtins.int
    peer_public_key: builtins.str
    peer_listen_addr: builtins.str
    def __init__(
        self,
        *,
        available_cpus: builtins.int = ...,
        available_ram: builtins.int = ...,
        peer_public_key: builtins.str = ...,
        peer_listen_addr: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["available_cpus", b"available_cpus", "available_ram", b"available_ram", "peer_listen_addr", b"peer_listen_addr", "peer_public_key", b"peer_public_key"]) -> None: ...

global___RegisterResponse = RegisterResponse

@typing_extensions.final
class InitRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Host(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ID_FIELD_NUMBER: builtins.int
        PEER_PUBLIC_KEY_FIELD_NUMBER: builtins.int
        PEER_LISTEN_ADDR_FIELD_NUMBER: builtins.int
        id: builtins.int
        peer_public_key: builtins.str
        peer_listen_addr: builtins.str
        def __init__(
            self,
            *,
            id: builtins.int = ...,
            peer_public_key: builtins.str = ...,
            peer_listen_addr: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["id", b"id", "peer_listen_addr", b"peer_listen_addr", "peer_public_key", b"peer_public_key"]) -> None: ...

    @typing_extensions.final
    class Machine(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing_extensions.final
        class MachineConfig(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            VCPU_COUNT_FIELD_NUMBER: builtins.int
            RAM_FIELD_NUMBER: builtins.int
            DISK_SIZE_FIELD_NUMBER: builtins.int
            ROOT_IMAGE_FIELD_NUMBER: builtins.int
            KERNEL_FIELD_NUMBER: builtins.int
            BOOT_PARAMETERS_FIELD_NUMBER: builtins.int
            vcpu_count: builtins.int
            """should also be 8 bit but protobuf doesn't support uint8..."""
            ram: builtins.int
            disk_size: builtins.int
            root_image: builtins.str
            kernel: builtins.str
            @property
            def boot_parameters(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
            def __init__(
                self,
                *,
                vcpu_count: builtins.int = ...,
                ram: builtins.int = ...,
                disk_size: builtins.int = ...,
                root_image: builtins.str = ...,
                kernel: builtins.str = ...,
                boot_parameters: collections.abc.Iterable[builtins.str] | None = ...,
            ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["boot_parameters", b"boot_parameters", "disk_size", b"disk_size", "kernel", b"kernel", "ram", b"ram", "root_image", b"root_image", "vcpu_count", b"vcpu_count"]) -> None: ...

        @typing_extensions.final
        class Info(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            NAME_FIELD_NUMBER: builtins.int
            LAT_FIELD_NUMBER: builtins.int
            LON_FIELD_NUMBER: builtins.int
            TLE1_FIELD_NUMBER: builtins.int
            TLE2_FIELD_NUMBER: builtins.int
            name: builtins.str
            lat: builtins.float
            lon: builtins.float
            TLE1: builtins.str
            TLE2: builtins.str
            def __init__(
                self,
                *,
                name: builtins.str | None = ...,
                lat: builtins.float | None = ...,
                lon: builtins.float | None = ...,
                TLE1: builtins.str | None = ...,
                TLE2: builtins.str | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["TLE1", b"TLE1", "TLE2", b"TLE2", "_TLE1", b"_TLE1", "_TLE2", b"_TLE2", "_lat", b"_lat", "_lon", b"_lon", "_name", b"_name", "lat", b"lat", "lon", b"lon", "name", b"name"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["TLE1", b"TLE1", "TLE2", b"TLE2", "_TLE1", b"_TLE1", "_TLE2", b"_TLE2", "_lat", b"_lat", "_lon", b"_lon", "_name", b"_name", "lat", b"lat", "lon", b"lon", "name", b"name"]) -> None: ...
            @typing.overload
            def WhichOneof(self, oneof_group: typing_extensions.Literal["_TLE1", b"_TLE1"]) -> typing_extensions.Literal["TLE1"] | None: ...
            @typing.overload
            def WhichOneof(self, oneof_group: typing_extensions.Literal["_TLE2", b"_TLE2"]) -> typing_extensions.Literal["TLE2"] | None: ...
            @typing.overload
            def WhichOneof(self, oneof_group: typing_extensions.Literal["_lat", b"_lat"]) -> typing_extensions.Literal["lat"] | None: ...
            @typing.overload
            def WhichOneof(self, oneof_group: typing_extensions.Literal["_lon", b"_lon"]) -> typing_extensions.Literal["lon"] | None: ...
            @typing.overload
            def WhichOneof(self, oneof_group: typing_extensions.Literal["_name", b"_name"]) -> typing_extensions.Literal["name"] | None: ...

        ID_FIELD_NUMBER: builtins.int
        HOST_FIELD_NUMBER: builtins.int
        CONFIG_FIELD_NUMBER: builtins.int
        INFO_FIELD_NUMBER: builtins.int
        @property
        def id(self) -> global___MachineID: ...
        host: builtins.int
        """should actually be 8 bit but protobuf doesn't support uint8..."""
        @property
        def config(self) -> global___InitRequest.Machine.MachineConfig: ...
        @property
        def info(self) -> global___InitRequest.Machine.Info: ...
        def __init__(
            self,
            *,
            id: global___MachineID | None = ...,
            host: builtins.int = ...,
            config: global___InitRequest.Machine.MachineConfig | None = ...,
            info: global___InitRequest.Machine.Info | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["config", b"config", "id", b"id", "info", b"info"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["config", b"config", "host", b"host", "id", b"id", "info", b"info"]) -> None: ...

    HOSTS_FIELD_NUMBER: builtins.int
    MACHINES_FIELD_NUMBER: builtins.int
    @property
    def hosts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InitRequest.Host]: ...
    @property
    def machines(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InitRequest.Machine]: ...
    def __init__(
        self,
        *,
        hosts: collections.abc.Iterable[global___InitRequest.Host] | None = ...,
        machines: collections.abc.Iterable[global___InitRequest.Machine] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["hosts", b"hosts", "machines", b"machines"]) -> None: ...

global___InitRequest = InitRequest

@typing_extensions.final
class StateUpdateRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class MachineDiff(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ACTIVE_FIELD_NUMBER: builtins.int
        ID_FIELD_NUMBER: builtins.int
        active: global___VMState.ValueType
        @property
        def id(self) -> global___MachineID: ...
        def __init__(
            self,
            *,
            active: global___VMState.ValueType = ...,
            id: global___MachineID | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["id", b"id"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["active", b"active", "id", b"id"]) -> None: ...

    @typing_extensions.final
    class NetworkDiff(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        BLOCKED_FIELD_NUMBER: builtins.int
        SOURCE_FIELD_NUMBER: builtins.int
        TARGET_FIELD_NUMBER: builtins.int
        LATENCY_FIELD_NUMBER: builtins.int
        BANDWIDTH_FIELD_NUMBER: builtins.int
        NEXT_FIELD_NUMBER: builtins.int
        PREV_FIELD_NUMBER: builtins.int
        blocked: builtins.bool
        @property
        def source(self) -> global___MachineID: ...
        @property
        def target(self) -> global___MachineID: ...
        latency: builtins.int
        bandwidth: builtins.int
        @property
        def next(self) -> global___MachineID:
            """used for path reconstruction"""
        @property
        def prev(self) -> global___MachineID: ...
        def __init__(
            self,
            *,
            blocked: builtins.bool = ...,
            source: global___MachineID | None = ...,
            target: global___MachineID | None = ...,
            latency: builtins.int = ...,
            bandwidth: builtins.int = ...,
            next: global___MachineID | None = ...,
            prev: global___MachineID | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["next", b"next", "prev", b"prev", "source", b"source", "target", b"target"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["bandwidth", b"bandwidth", "blocked", b"blocked", "latency", b"latency", "next", b"next", "prev", b"prev", "source", b"source", "target", b"target"]) -> None: ...

    MACHINE_DIFFS_FIELD_NUMBER: builtins.int
    NETWORK_DIFFS_FIELD_NUMBER: builtins.int
    @property
    def machine_diffs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StateUpdateRequest.MachineDiff]: ...
    @property
    def network_diffs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StateUpdateRequest.NetworkDiff]: ...
    def __init__(
        self,
        *,
        machine_diffs: collections.abc.Iterable[global___StateUpdateRequest.MachineDiff] | None = ...,
        network_diffs: collections.abc.Iterable[global___StateUpdateRequest.NetworkDiff] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["machine_diffs", b"machine_diffs", "network_diffs", b"network_diffs"]) -> None: ...

global___StateUpdateRequest = StateUpdateRequest
