// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: database.proto

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseClient interface {
	Constellation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConstellationInfo, error)
	Shell(ctx context.Context, in *ShellRequest, opts ...grpc.CallOption) (*ShellInfo, error)
	Satellite(ctx context.Context, in *SatelliteId, opts ...grpc.CallOption) (*SatelliteInfo, error)
	GroundStation(ctx context.Context, in *GroundStationId, opts ...grpc.CallOption) (*GroundStationInfo, error)
	Path(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathInfo, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) Constellation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConstellationInfo, error) {
	out := new(ConstellationInfo)
	err := c.cc.Invoke(ctx, "/openfogstack.celestial.database.Database/Constellation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) Shell(ctx context.Context, in *ShellRequest, opts ...grpc.CallOption) (*ShellInfo, error) {
	out := new(ShellInfo)
	err := c.cc.Invoke(ctx, "/openfogstack.celestial.database.Database/Shell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) Satellite(ctx context.Context, in *SatelliteId, opts ...grpc.CallOption) (*SatelliteInfo, error) {
	out := new(SatelliteInfo)
	err := c.cc.Invoke(ctx, "/openfogstack.celestial.database.Database/Satellite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GroundStation(ctx context.Context, in *GroundStationId, opts ...grpc.CallOption) (*GroundStationInfo, error) {
	out := new(GroundStationInfo)
	err := c.cc.Invoke(ctx, "/openfogstack.celestial.database.Database/GroundStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) Path(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathInfo, error) {
	out := new(PathInfo)
	err := c.cc.Invoke(ctx, "/openfogstack.celestial.database.Database/Path", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
// All implementations should embed UnimplementedDatabaseServer
// for forward compatibility
type DatabaseServer interface {
	Constellation(context.Context, *Empty) (*ConstellationInfo, error)
	Shell(context.Context, *ShellRequest) (*ShellInfo, error)
	Satellite(context.Context, *SatelliteId) (*SatelliteInfo, error)
	GroundStation(context.Context, *GroundStationId) (*GroundStationInfo, error)
	Path(context.Context, *PathRequest) (*PathInfo, error)
}

// UnimplementedDatabaseServer should be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (UnimplementedDatabaseServer) Constellation(context.Context, *Empty) (*ConstellationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Constellation not implemented")
}
func (UnimplementedDatabaseServer) Shell(context.Context, *ShellRequest) (*ShellInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedDatabaseServer) Satellite(context.Context, *SatelliteId) (*SatelliteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Satellite not implemented")
}
func (UnimplementedDatabaseServer) GroundStation(context.Context, *GroundStationId) (*GroundStationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroundStation not implemented")
}
func (UnimplementedDatabaseServer) Path(context.Context, *PathRequest) (*PathInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Path not implemented")
}

// UnsafeDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServer will
// result in compilation errors.
type UnsafeDatabaseServer interface {
	mustEmbedUnimplementedDatabaseServer()
}

func RegisterDatabaseServer(s grpc.ServiceRegistrar, srv DatabaseServer) {
	s.RegisterService(&Database_ServiceDesc, srv)
}

func _Database_Constellation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Constellation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openfogstack.celestial.database.Database/Constellation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Constellation(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_Shell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Shell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openfogstack.celestial.database.Database/Shell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Shell(ctx, req.(*ShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_Satellite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SatelliteId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Satellite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openfogstack.celestial.database.Database/Satellite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Satellite(ctx, req.(*SatelliteId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GroundStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroundStationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GroundStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openfogstack.celestial.database.Database/GroundStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GroundStation(ctx, req.(*GroundStationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_Path_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).Path(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openfogstack.celestial.database.Database/Path",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).Path(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Database_ServiceDesc is the grpc.ServiceDesc for Database service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Database_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openfogstack.celestial.database.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Constellation",
			Handler:    _Database_Constellation_Handler,
		},
		{
			MethodName: "Shell",
			Handler:    _Database_Shell_Handler,
		},
		{
			MethodName: "Satellite",
			Handler:    _Database_Satellite_Handler,
		},
		{
			MethodName: "GroundStation",
			Handler:    _Database_GroundStation_Handler,
		},
		{
			MethodName: "Path",
			Handler:    _Database_Path_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database.proto",
}
